<plexus>

  <!--
   |
   | Logging configuration.
   |
   -->
  <logging>
    <implementation>org.codehaus.plexus.logging.ConsoleLoggerManager</implementation>
  </logging>

  <!--
   |
   | Service Repository.
   |
   -->
  <service-repository>
    <implementation>org.codehaus.plexus.lifecycle.avalon.AvalonComponentRepository</implementation>
  </service-repository>

  <!--
   |
   | Resource Manager
   |
   -->
  <resource-manager>
    <implementation>org.codehaus.plexus.classloader.DefaultResourceManager</implementation>
  </resource-manager>

  <!--
   |
   | Lifecycle handlers.
   |
   -->
  <lifecycle-handlers default="avalon">
    <lifecycle-handler>
      <id>avalon</id>
      <name>Avalon Lifecycle Handler</name>
      <implementation>org.codehaus.plexus.lifecycle.avalon.AvalonLifecycleHandler</implementation>
      <start-segment>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.LogEnablePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ContextualizePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ServicePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ConfigurePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ParameterizePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.InitializePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.StartPhase"/>
      </start-segment>
      <suspend-segment>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.SuspendPhase"/>
      </suspend-segment>
      <resume-segment>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ResumePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.RecontextualizePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ReconfigurePhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.ReparameterizePhase"/>
      </resume-segment>
      <end-segment>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.StopPhase"/>
        <phase implementation="org.codehaus.plexus.lifecycle.phase.DisposePhase"/>
      </end-segment>
    </lifecycle-handler>
  </lifecycle-handlers>

  <!--
   |
   | Instance managers.
   |
   -->
  <instance-managers default="singleton">
    <instance-manager>
      <instantiation-strategy>per-lookup</instantiation-strategy>
      <description>New component instance per lookup which is disposed upon release</description>
      <role>org.codehaus.plexus.service.repository.instance.InstanceManager</role>
      <implementation>org.codehaus.plexus.service.repository.instance.PerLookupInstanceManager</implementation>
      <configuration>
      </configuration>
    </instance-manager>
    <instance-manager>
      <instantiation-strategy>poolable</instantiation-strategy>
      <description>Component is pooled and only disposed when the pool gets too big. Growable pool</description>
      <role>org.codehaus.plexus.service.repository.instance.InstanceManager</role>
      <implementation>org.codehaus.plexus.service.repository.instance.PoolableInstanceManager</implementation>
      <configuration>
        <initial-capacity>5</initial-capacity>
        <sweep-interval>5</sweep-interval>
        <max-capacity>30</max-capacity>
        <min-capacity>5</min-capacity>
        <trigger-size>20</trigger-size>
      </configuration>
    </instance-manager>
    <instance-manager>
      <instantiation-strategy>singleton</instantiation-strategy>
      <description>The classic singleton manager. Once no more components are connected the
        instance is disposed</description>
      <role>org.codehaus.plexus.service.repository.instance.InstanceManager</role>
      <implementation>org.codehaus.plexus.service.repository.instance.ClassicSingletonInstanceManager</implementation>
      <configuration>
      </configuration>
    </instance-manager>
    <instance-manager>
      <instantiation-strategy>singleton-keep-alive</instantiation-strategy>
      <description>Singleton instance manager which keeps a single instance alive until
        the component repository is disposed.</description>
      <role>org.codehaus.plexus.service.repository.instance.InstanceManager</role>
      <implementation>org.codehaus.plexus.service.repository.instance.KeepAliveSingletonInstanceManager</implementation>
      <configuration>
      </configuration>
    </instance-manager>
  </instance-managers>

  <!-- Default Components -->

  <components>
    <component>
      <role>org.codehaus.plexus.service.repository.factory.ComponentFactory</role>
      <role-hint>java</role-hint>
      <implementation>org.codehaus.plexus.service.repository.factory.JavaComponentFactory</implementation>
      <configuration>
      </configuration>
    </component>
  </components>

  <!-- Component Profiles -->

  <component-profiles default="standard">
    <component-profile>
      <id>standard</id>
      <lifecycle-handler>avalon</lifecycle-handler>
      <instance-manager>singleton</instance-manager>
      <factory>java</factory>
    </component-profile>
  </component-profiles>

</plexus>
